{
  "comments": [
    {
      "key": {
        "uuid": "a9964639_70ee64f5",
        "filename": "src/LLDP.cpp",
        "patchSetId": 17
      },
      "lineNbr": 40,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-29T20:40:36Z",
      "side": 1,
      "message": "there\u0027s a `using` for that type",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 59
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cef2c87_7c574990",
        "filename": "src/LLDP.cpp",
        "patchSetId": 17
      },
      "lineNbr": 40,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T09:34:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9964639_70ee64f5",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 59
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a549bd0d_e01fb060",
        "filename": "src/LLDP.cpp",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-29T20:40:36Z",
      "side": 1,
      "message": "I would love to get a TODO here in the code reminding to ask systemd-networkd over D-bus for just those interfaces which are needed, and to change severity to something higher than debug once that happens.\n\nThe code is also still using \"default logger\", whatever it is. I\u0027m quite sure this won\u0027t work with spdlog when you\u0027ve created several loggers.",
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c8b7ee6_2eb0b172",
        "filename": "src/LLDP.cpp",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-30T08:57:46Z",
      "side": 1,
      "message": "\u003e The code is also still using \"default logger\", whatever it is. I\u0027m quite sure this won\u0027t work with spdlog when you\u0027ve created several loggers.\n\nas you said during today\u0027s call, it\u0027s now using a default logger in the other patch, my bad, I missed that part. The other point stands, though.",
      "parentUuid": "a549bd0d_e01fb060",
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53b1a6ff_bd22369b",
        "filename": "src/LLDP.cpp",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T09:34:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c8b7ee6_2eb0b172",
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b345a764_2aa8048a",
        "filename": "src/LLDP.cpp",
        "patchSetId": 17
      },
      "lineNbr": 82,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-29T20:40:36Z",
      "side": 1,
      "message": "I think this would be cleaner and more DRYish:\n\n while (auto n \u003d nextNeighbor(ifs)) ...",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 97
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65c39334_17cfd0ff",
        "filename": "src/LLDP.cpp",
        "patchSetId": 17
      },
      "lineNbr": 82,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T09:34:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b345a764_2aa8048a",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 97
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "293abe47_cf409979",
        "filename": "src/LLDP.h",
        "patchSetId": 17
      },
      "lineNbr": 31,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-29T20:40:36Z",
      "side": 1,
      "message": "I think that there\u0027s no need for that wrapper of the deleter, is it?\n\n using sd_lldp_neighbor_managed \u003d std::unique_ptr\u003csd_lldp_neighbor, \u0026sd_lldp_neighbor_unrefp\u003e;\n\nAlso, let\u0027s prefer the `using` notation.",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 31,
        "endChar": 93
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66e6e7e7_0967d8a1",
        "filename": "src/LLDP.h",
        "patchSetId": 17
      },
      "lineNbr": 31,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T09:34:10Z",
      "side": 1,
      "message": "Using \u0027using\u0027 is done.\n\nI do not think you can pass the *concrete* function into this \"typedef/using\" type specification (https://en.cppreference.com/w/cpp/memory/unique_ptr).\n\nBut you can of course say that the deleter is a ptr to function (of the same type) and then use the *concrete* sd_lldp_neighbor_unrefp function in the constructor.\n\nSay\n using managed \u003d std::unique_ptr\u003csd_lldp_neighbor, (sd_lldp_neighbor*)(sd_lldp_neighbor*)() ;\nand then\n auto ptr \u003d new managed(hi_i_am_a_pointer, \u0026sd_lldp_neighbor_unrefp);\n\nMy approach bypasses that. I could specify a lambda there, but my compiler says this feature is available at C++20.\n\nOr am I wrong?",
      "parentUuid": "293abe47_cf409979",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 31,
        "endChar": 93
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a590489e_f292c51d",
        "filename": "src/LLDP.h",
        "patchSetId": 17
      },
      "lineNbr": 31,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-09-30T09:58:35Z",
      "side": 1,
      "message": "Yeah, it is unfortunate that when using a free function deleter, the actual function also has to be specified in the constructor. The lambda version only works with C++20, because C++20 allows default-constructible lambdas.\nI\u0027ve had a similar problem in netconf-cli when wrapping libyang pointers. Something similar could be used here:\n\n  template \u003ctypename Type\u003e using ptrDeleter_type \u003d void (*)(Type*);\n  template \u003ctypename Type\u003e const ptrDeleter_type\u003cType\u003e ptrDeleter;\n  template \u003c\u003e const auto ptrDeleter\u003c\u003e \u003d sd_lldp_neighbor;\n  template \u003ctypename Type\u003e\n  auto wrap(Type* ptr)\n  {\n      return std::unique_ptr\u003cType, ptrDeleter_type\u003cType\u003e\u003e{ptr, ptrDeleter\u003cType\u003e};\n  }\n\n\nYou use the wrap function like this:\n  auto wrapped \u003d wrap(hi_i_am_a_pointer);\n\n\nOf course, if you only have `sd_lldp_neighbor`, then all of the template stuff can be removed:\n  auto wrap(sd_lldp_neighbor* ptr)\n  {\n      return std::unique_ptr\u003csd_lldp_neighbor, sd_lldp_neighbor_unrefp\u003e{ptr, sd_lldp_neighbor_unrefp};\n  }\n\nAlternatively, you could just make a bunch of overloads for `wrap`.\nhttps://gerrit.cesnet.cz/plugins/gitiles/CzechLight/netconf-cli/+/refs/heads/master/src/yang_access.cpp#14",
      "parentUuid": "66e6e7e7_0967d8a1",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 31,
        "endChar": 93
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e281d48_576e5b19",
        "filename": "src/LLDP.h",
        "patchSetId": 17
      },
      "lineNbr": 31,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-09-30T10:50:26Z",
      "side": 1,
      "message": "One small note: not using the custom functor also allows you to keep everything inside the .cpp file. The unique_ptr template argument can be specified as the function type: https://gerrit.cesnet.cz/plugins/gitiles/CzechLight/netconf-cli/+/refs/heads/master/src/yang_access.hpp#57)",
      "parentUuid": "a590489e_f292c51d",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 31,
        "endChar": 93
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c92f47c_1c6b1539",
        "filename": "src/LLDP.h",
        "patchSetId": 17
      },
      "lineNbr": 31,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T11:24:02Z",
      "side": 1,
      "message": "I think the functor I used is more readable :D",
      "parentUuid": "1e281d48_576e5b19",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 31,
        "endChar": 93
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f246aa4_01a44f0d",
        "filename": "tests/dbus-helpers/dbus_server.cpp",
        "patchSetId": 17
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-29T20:40:36Z",
      "side": 1,
      "message": "Can this be done with just a lambda or just a method? Having a lambda that wraps a method feels a bit awkward to me. I guess that the reason is probably encapsulation, but this is a test object, let\u0027s cut the boilerplate please.",
      "range": {
        "startLine": 11,
        "startChar": 80,
        "endLine": 11,
        "endChar": 112
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "552ff61d_67f87981",
        "filename": "tests/dbus-helpers/dbus_server.cpp",
        "patchSetId": 17
      },
      "lineNbr": 11,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T09:34:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f246aa4_01a44f0d",
      "range": {
        "startLine": 11,
        "startChar": 80,
        "endLine": 11,
        "endChar": 112
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d3a30f4_7e2549fc",
        "filename": "tests/lldp-systemd.cpp",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-29T20:40:36Z",
      "side": 1,
      "message": "nit: can you perhaps name these descriptively, such as \"just-enp0s25\" or \"only-eth0\", etc?",
      "range": {
        "startLine": 36,
        "startChar": 19,
        "endLine": 36,
        "endChar": 24
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b1198cb_abed64aa",
        "filename": "tests/lldp-systemd.cpp",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T09:34:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d3a30f4_7e2549fc",
      "range": {
        "startLine": 36,
        "startChar": 19,
        "endLine": 36,
        "endChar": 24
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0bc0746_8f3295c1",
        "filename": "tests/lldp-systemd.cpp",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-29T20:40:36Z",
      "side": 1,
      "message": "\"empty\", perhaps?",
      "range": {
        "startLine": 43,
        "startChar": 19,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba865fb0_ee7af734",
        "filename": "tests/lldp-systemd.cpp",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-09-30T09:34:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0bc0746_8f3295c1",
      "range": {
        "startLine": 43,
        "startChar": 19,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "78b92fb88e59f99c82aad629621f1f667a23618c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}